// User Methoden
  getUsers() {
    return this.#fetchAdvanced(this.#getUsersURL()).then((responseJSON) => {
      let userBOs = UserBO.fromJSON(responseJSON);
      // console.info(userBOs);
      return new Promise(function (resolve) {
        resolve(userBOs);
      });
    });
  }

  getUser(userId) {
    return this.#fetchAdvanced(this.#getUserURL(userId)).then((responseJSON) => {
      // We always get an array of UserBOs.fromJSON, but only need one object
      let responseUserBO = UserBO.fromJSON(responseJSON)[0];
      // console.info(responseUseryBO);
      return new Promise(function (resolve) {
        resolve(responseUserBO);
      });
    });
  }

  addUser(userBO) {
    return this.#fetchAdvanced(this.#addUserURL(), {
      method: 'POST',
      headers: {
        Accept: 'application/json, text/plain',
        'Content-type': 'application/json',
      },
      body: JSON.stringify(userBO),
    }).then((responseJSON) => {
      // We always get an array of UserBO.fromJSON, but only need one object
      let responseUserBO = UserBO.fromJSON(responseJSON)[0];
      // console.info(userBOs);
      return new Promise(function (resolve) {
        resolve(responseUserBO);
      });
    });
  }

  updateUser(userBO) {
    return this.#fetchAdvanced(this.#updateUserURL(userBO.getID()), {
      method: 'PUT',
      headers: {
        Accept: 'application/json, text/plain',
        'Content-type': 'application/json',
      },
      body: JSON.stringify(userBO),
    }).then((responseJSON) => {
      // We always get an array of UserBOs.fromJSON
      let responseUserBO = UserBO.fromJSON(responseJSON)[0];
      // console.info(userBOs);
      return new Promise(function (resolve) {
        resolve(responseUserBO);
      });
    });
  }

  deleteUser(userId) {
    return this.#fetchAdvanced(this.#deleteUserURL(userId), {
      method: 'DELETE',
    }).then((responseJSON) => {
      // We always get an array of UserBO.fromJSON
      let responseUserBO = UserBO.fromJSON(responseJSON)[0];
      // console.info(userBOs);
      return new Promise(function (resolve) {
        resolve(responseUserBO);
      });
    });
  }
}